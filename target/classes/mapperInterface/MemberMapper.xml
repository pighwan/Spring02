<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
  
<mapper namespace="mapperInterface.MemberMapper">
<!--  
** interface 를 통해 ~Mapper 접근
=> interface ~Mapper.java 의 패키지명과 화일명과  
   ~Mapper.xml 의 패키지명, 화일명, namespace 값은 같아야됨. -->  
   
<!-- ** Member Check List 
=> select * from member where lev in ('A','B','C') order by id asc (추천)
   select * from member where lev='A' OR lev='B' OR lev='C' order by id asc (비추)
=> Mapper 에 반복문 적용하기 :<foreach.....  
--> 
   <select id="checkList" resultType="vo.MemberVO">
   		select * from member where lev in 
   		<foreach collection="check" item="it" open="(" close=")" separator=",">
   			#{it}
   		</foreach>
   		order by id
   </select>
 	
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 ** PageList 2. searchList 기능 ( Sql문 추가 )   
 -->
	<sql id="search">
		<if test="keyword != null">
			<bind name="keyVal" value="'%'+keyword+'%'"/>
		</if>
		<choose>
			<when test="searchType=='i'.toString()">
				and id LIKE #{keyVal} )
			</when>
			<when test="searchType=='a'.toString()">
  				and name Like #{keyVal} )
	  		</when>
		  	<when test="searchType=='l'.toString()">
		  		and lev Like #{keyVal} )
		  	</when>
		  	<when test="searchType=='r'.toString()">
		  		and rid Like #{keyVal} )
		  	</when>
		  	<when test="searchType=='b'.toString()">
		  		and birthd Like #{keyVal} )
		  	</when>
		  	<when test="searchType=='ia'.toString()">
		  		and id Like #{keyVal}
		  		or  name Like #{keyVal} )
		  	</when>
		  	<otherwise>)</otherwise>
		</choose>
	</sql>

	<select id="searchRowsCount" resultType="int">
		select count(*) from member where (id!='admin' 
		<include refid="search"></include>	
	</select>
 	<select id="searchList" resultType="vo.MemberVO">
 		select id, password, name, 
 		 	DECODE(lev,'A','관리자','B','나무','C','잎새','새싹') lev, 
 		 	birthd, point, weight, rid, uploadfile from 
			(select m.*, ROW_NUMBER() OVER(order by id asc) rnum from member m where id!='admin' 
			<include refid="search"></include>
			where rnum between #{sno} and #{eno}
	</select>
 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 ** PageList 1.
 -->
 	<select id="totalRowCount"  resultType="int" >
 		<![CDATA[
 		select count(*) from member where id <> 'admin'
 		]]>
 	</select>
 	
 	<select id="pageList"  resultType="vo.MemberVO"  >
 		 select id, password, name, 
 		 	DECODE(lev,'A','관리자','B','나무','C','잎새','새싹') lev, 
 		 	birthd, point, weight, rid, uploadfile from 
			(select m.*, ROW_NUMBER() OVER(order by id asc) rnum from member m where id!='admin')
			where rnum between #{sno} and #{eno}
 	</select>
 	
 	<!-- ** CRUD 기본 ** -->
 	<select id="selectList" resultType="vo.MemberVO">
 		select id, password, name, 
 		 	DECODE(lev,'A','관리자','B','나무','C','잎새','새싹') lev, 
 		 	birthd, point, weight, rid, uploadfile  
 			from member where id != 'admin'
 	</select>
 
 	<select id="selectOne" resultType="vo.MemberVO">
		select * from member where id = #{id}
	</select>
	<!-- #{id} : parameter 로 전달된 vo 의 id 라는 컬럼의 value 가 전달됨 -->

	<insert id="insert">
		insert into member values(
		#{id},#{password},#{name},#{lev},#{birthd},#{point},#{weight},#{rid},#{uploadfile},1)
	</insert>
	
	<update id="update">
		update member set password=#{password}, name=#{name}, lev=#{lev}, birthd=#{birthd}
		, point=#{point}, weight=#{weight}, rid=#{rid}, uploadfile=#{uploadfile} where id=#{id}
	</update>
	
	<delete id="delete">
		delete from member where id=#{id}	
	</delete>
 
</mapper>